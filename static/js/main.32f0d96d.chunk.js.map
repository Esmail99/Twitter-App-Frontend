{"version":3,"sources":["components/avatar.jpg","components/logo.png","components/likes.jpg","components/like.webp","components/comment.png","components/delete.webp","components/Navigation.js","components/Signin.js","components/Register.js","components/Home.js","components/Profile.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navigation","this","props","isSignedin","className","title","onClick","changeRoute","src","require","alt","userInfo","username","React","Component","Signin","onEmailChange","event","setState","signinEmail","target","value","onPasswordChange","signinPassword","onFormSubmit","preventDefault","fetch","method","headers","body","JSON","stringify","email","state","password","then","response","json","user","_id","loadUser","onRegisterClick","onSubmit","id","htmlFor","onChange","type","name","href","Register","onUsernameChange","registerUsername","registerEmail","registerPassword","onSigninClick","Home","onTextareaChange","newTweetContent","clearInput","document","getElementById","content","tweet","componentDidMount","catch","err","console","log","handleLikes","tweetId","liked","innerHTML","Number","Object","assign","classList","remove","data","add","showCommentBlock","toggle","onCommentChange","comment","onCommentClick","length","owner","newComment","tweets","res","map","index","alreadyLiked","likedBy","forEach","key","likes","placeholder","style","resize","comments","onDeleteClick","initialState","route","App","Profile","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.32f0d96d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/avatar.732dc8fe.jpg\";","module.exports = __webpack_public_path__ + \"static/media/logo.d6716f1a.png\";","module.exports = __webpack_public_path__ + \"static/media/likes.39182f5f.jpg\";","module.exports = __webpack_public_path__ + \"static/media/like.b9d889dd.webp\";","module.exports = __webpack_public_path__ + \"static/media/comment.ae267f51.png\";","module.exports = __webpack_public_path__ + \"static/media/delete.f1782b1c.webp\";","import React from 'react';\r\n\r\nclass Navigation extends React.Component{\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                {\r\n                this.props.isSignedin\r\n            ?   <nav className=\"dt w-100 border-box pa3 ph5-ns bg-black-80 white\">\r\n                    <p className=\"dtc v-mid mid-gray link w-25\" title=\"Home\">\r\n                        <img \r\n                            onClick={() => this.props.changeRoute('homeSignedin')}\r\n                            src={require(\"./logo.png\")} \r\n                            className=\"dib dim w2 h3 br-100 pointer w3 h3 bg-blue ml2\" \r\n                            alt=\"Site Name\" \r\n                        />\r\n                    </p>\r\n                    <div className=\"dtc v-mid w-75 tr\">\r\n                        <p \r\n                            onClick={() => this.props.changeRoute('profile')}\r\n                            className=\"link dim f3-ns dib pointer mr2\" \r\n                            title=\"Contact\">\r\n                            Hi, {this.props.userInfo.username}\r\n                        </p>\r\n                        <p \r\n                            onClick={() => this.props.changeRoute('signout')}\r\n                            className=\"link dim f3-ns dib pointer mr2 ml4\" \r\n                            title=\"Contact\">\r\n                            Signout\r\n                        </p>\r\n                    </div>\r\n                </nav>\r\n            :   <nav className=\"dt w-100 border-box pa3 ph5-ns bg-black-80 white\">\r\n                    <p className=\"dtc v-mid mid-gray link w-25\" title=\"Home\">\r\n                        <img \r\n                            onClick={() => this.props.changeRoute('homeDefault')}\r\n                            src={require(\"./logo.png\")} \r\n                            className=\"dib dim w2 h3 br-100 pointer w3 h3 bg-blue ml2\" \r\n                            alt=\"Site Name\" \r\n                        />\r\n                    </p>   \r\n                    <div className=\"dtc v-mid w-75 tr\">\r\n                        <p \r\n                            onClick={() => this.props.changeRoute('signin')}\r\n                            className=\"link dim f3-ns dib mr3 mr4-ns pointer\" \r\n                            title=\"Store\">\r\n                            Signin\r\n                        </p>\r\n                        <p \r\n                            onClick={() => this.props.changeRoute('register')}\r\n                            className=\"link dim f3-ns dib pointer mr2\" \r\n                            title=\"Contact\">\r\n                            Register\r\n                        </p>\r\n                    </div>\r\n                </nav>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Navigation;","import React from 'react'\r\n\r\nclass Signin extends React.Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            signinEmail: '',\r\n            signinPassword: ''\r\n        }\r\n    }\r\n\r\n    onEmailChange = (event) => {\r\n        this.setState({ signinEmail: event.target.value })\r\n    }\r\n\r\n    onPasswordChange = (event) => {\r\n        this.setState({ signinPassword: event.target.value })\r\n    }\r\n\r\n    onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        fetch('http://localhost:5000/signin',{\r\n            method: 'post',\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify({\r\n                email: this.state.signinEmail,\r\n                password: this.state.signinPassword\r\n            })\r\n        })\r\n        .then(response => response.json())\r\n        .then(user => {\r\n            if(user._id){\r\n                this.props.loadUser(user)\r\n                this.props.changeRoute('homeSignedin');\r\n            }\r\n        })\r\n    }\r\n\r\n    onRegisterClick = () => {\r\n        this.props.changeRoute('register');\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <main className=\"pa4 black-80\">\r\n                    <form className=\"measure center\" onSubmit={this.onFormSubmit}>\r\n                        <fieldset id=\"sign_up\" className=\"ba b--transparent ph0 mh0\">\r\n                        <legend className=\"f4 fw6 ph0 mh0\">Sign In</legend>\r\n                        <div className=\"mt3\">\r\n                            <label className=\"db fw6 lh-copy f6\" htmlFor=\"email-address\">Email</label>\r\n                            <input \r\n                                onChange={this.onEmailChange}\r\n                                className=\"pa2 input-reset ba bg-transparent w-100\" \r\n                                type=\"email\" \r\n                                name=\"email-address\"  \r\n                                id=\"email-address\" \r\n                            />\r\n                        </div>\r\n                        <div className=\"mv3\">\r\n                            <label className=\"db fw6 lh-copy f6\" htmlFor=\"password\">Password</label>\r\n                            <input \r\n                                onChange={this.onPasswordChange}\r\n                                className=\"b pa2 input-reset ba bg-transparent w-100\" \r\n                                type=\"password\" \r\n                                name=\"password\"  \r\n                                id=\"password\" \r\n                                // required\r\n                            />\r\n                        </div>\r\n                        </fieldset>\r\n                        <div>\r\n                            <input \r\n                                className=\"b ph3 pv2 input-reset ba b--black bg-transparent grow pointer f6 dib\" \r\n                                type=\"submit\" \r\n                                value=\"Sign in\" \r\n                                // required\r\n                            />\r\n                        </div>\r\n                        <div className=\"lh-copy mt3\">\r\n                            Don't have an account yet ? \r\n                            <span \r\n                                onClick={this.onRegisterClick}\r\n                                href=\"#0\" \r\n                                className=\"f6 link blue underline dim ml1 pointer\"> \r\n                                Register Now\r\n                            </span>\r\n                        </div>\r\n                    </form>\r\n                </main>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default Signin;","import React from 'react'\r\n\r\nclass Register extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            registerUsername: '',\r\n            registerEmail: '',\r\n            registerPassword: ''\r\n        }\r\n    }\r\n\r\n    onUsernameChange = (event) => {\r\n        this.setState({ registerUsername: event.target.value })\r\n    }\r\n\r\n    onEmailChange = (event) => {\r\n        this.setState({ registerEmail: event.target.value })\r\n    }\r\n\r\n    onPasswordChange = (event) => {\r\n        this.setState({ registerPassword: event.target.value })\r\n    }\r\n\r\n    onSigninClick = () => {\r\n        this.props.changeRoute('signin');\r\n    }\r\n\r\n    onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        fetch('http://localhost:5000/register',{\r\n            method: 'post',\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify({\r\n              username: this.state.registerUsername,\r\n              email: this.state.registerEmail,\r\n              password: this.state.registerPassword\r\n            })\r\n        })\r\n        .then(response => response.json())\r\n        .then(user => {\r\n            if(user._id){\r\n                this.props.changeRoute('signin');\r\n            }\r\n        })\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <main className=\"pa4 black-80\">\r\n                    <form className=\"measure center\" onSubmit={this.onFormSubmit}>\r\n                        <fieldset id=\"sign_up\" className=\"ba b--transparent ph0 mh0\">\r\n                        <legend className=\"f4 fw6 ph0 mh0\">Register</legend>\r\n                        <div className=\"mt3\">\r\n                            <label className=\"db fw6 lh-copy f6\">Username</label>\r\n                            <input \r\n                                onChange={this.onUsernameChange}\r\n                                className=\"pa2 input-reset ba bg-transparent w-70\" \r\n                                type=\"name\" \r\n                                name=\"username\" \r\n                                // required\r\n                            />\r\n                        </div>\r\n                        <div className=\"mt3\">\r\n                            <label className=\"db fw6 lh-copy f6\">Email</label>\r\n                            <input \r\n                                onChange={this.onEmailChange}\r\n                                className=\"pa2 input-reset ba bg-transparent w-75\" \r\n                                type=\"email\" \r\n                                name=\"email-address\" \r\n                                // required\r\n                            />\r\n                        </div>\r\n                        <div className=\"mv3\">\r\n                            <label className=\"db fw6 lh-copy f6\">Password</label>\r\n                            <input \r\n                                onChange={this.onPasswordChange}\r\n                                className=\"pa2 input-reset ba bg-transparent w-75\" \r\n                                type=\"password\" \r\n                                name=\"password\" \r\n                                // required\r\n                            />\r\n                        </div>\r\n                        </fieldset>\r\n                        <div>\r\n                        <input className=\"b ph3 pv2 input-reset ba b--black bg-transparent grow pointer f6 dib\" type=\"submit\" value=\"Register\" />\r\n                        </div>\r\n                        <div className=\"lh-copy mt3\">Already have an accout?\r\n                            <span \r\n                                onClick={this.onSigninClick}\r\n                                className=\"f6 link blue dim underline pointer ml1\"> \r\n                                Signin\r\n                            </span>\r\n                        </div>\r\n                    </form>\r\n                </main>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default Register;","import React from 'react'\r\n\r\nclass Home extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            tweets: [],\r\n            newTweetContent: '',\r\n            liked: {},\r\n            comment: ''\r\n        }\r\n    }\r\n    \r\n    componentDidMount() {\r\n        fetch(\"http://localhost:5000/home\")\r\n        .then(res => res.json())\r\n        .then(tweets => {\r\n            tweets = tweets.map((tweet,index) => {\r\n                let alreadyLiked = false;\r\n                tweet.likedBy.forEach(likedBy => {\r\n                    if(likedBy === this.props.userInfo.username)\r\n                        return alreadyLiked = true\r\n                })\r\n                this.setState(Object.assign(this.state.liked,{ [tweet._id]: alreadyLiked }));\r\n                return(\r\n                    <article className=\"w-100 center bg-white br4 pa3 pa3-ns mv3 ba b--black-40 pb0 pb0-ns\" key={index}>\r\n                        <div className=\"tc\">\r\n                            <img src={require(\"./avatar.jpg\")} className=\"br-100 h2 w2 dib pointer dim\" title=\"Photo of a kitty staring at you\" alt=\"avatar\" />\r\n                            <h1 className=\"f4 pointer dim\">{tweet.username}</h1>\r\n                            <hr className=\"mw3 bb bw1 b--black-10\" />\r\n                        </div>\r\n                        <p className=\"lh-copy measure center f3 black-70\">{tweet.content}</p>\r\n                        <div className='tl mb2'>\r\n                            <img \r\n                                src={require(\"./likes.jpg\")}\r\n                                className='w2 ma0 pa0'\r\n                                alt=\"likes\" \r\n                            />\r\n                            <span id={`likeCounter${tweet._id}`} className='f3'>{tweet.likes}</span> \r\n                            <hr className='pa0 ma0 bn' />\r\n                            <button onClick={() => this.handleLikes(tweet._id)} className='dim pointer w-50 bn outline-0'>\r\n                                <img\r\n                                    id={`likeBtn${tweet._id}`} \r\n                                    src={require(\"./like.webp\")}\r\n                                    className= {this.state.liked[tweet._id] ? 'w2 br-100 grow pointer dim bg-light-blue' : 'w2 br-100 grow pointer dim'}\r\n                                    alt=\"like\"\r\n                                />\r\n                            </button>\r\n                            <button onClick={() => this.showCommentBlock(tweet._id)} id='likeBtn' className='dim pointer w-50 bn outline-0'>\r\n                                <img \r\n                                    src={require(\"./comment.png\")}\r\n                                    className='w2 br-100 grow pointer dim'\r\n                                    alt=\"comment\" \r\n                                />\r\n                            </button>\r\n                        </div>\r\n\r\n                        {/* Adding comments */}\r\n                        <div>\r\n                            <div className=\"bg-white mw6 center pa2 br4-ns ba b--white dn\" id={`commentBlock${tweet._id}`}>\r\n                                <fieldset className=\"cf bn ma0 pa0\">\r\n                                <div className=\"cf\">\r\n                                    <img src={require(\"./avatar.jpg\")} className=\"fl br-100 h2 w2 dib pointer dim mt1 mr2\" title=\"Photo of a kitty staring at you\" alt=\"avatar\" />\r\n                                    <textarea \r\n                                        onChange = {this.onCommentChange}\r\n                                        className=\"f3 input-reset bn fl black-80 bg-white pt2 lh-solid w-60 w-60-m w-60-l br2-ns outline-0\" \r\n                                        placeholder=\"Write a comment..\" \r\n                                        type=\"text\" \r\n                                        name=\"tweet\" \r\n                                        id=\"comment\" \r\n                                        style={{resize: 'none'}} \r\n                                    />\r\n                                    <input \r\n                                        onClick={() => this.onCommentClick(tweet._id)}\r\n                                        className=\"f6 f5-l button-reset fr pv3 tc bn bg-animate bg-blue grow white pointer w-30 w-20-m w-20-l br4-ns outline-0\" \r\n                                        type=\"submit\" \r\n                                        value=\"Comment\" \r\n                                    />\r\n                                </div>\r\n                                </fieldset>\r\n                            </div>\r\n                        </div> \r\n\r\n                        {\r\n                            tweet.comments = tweet.comments.map((comment,index) => {\r\n                                return(\r\n                                    <div className='bg-black-20 br3 tl ph3 pa2 pb0 w-80 ml4' key={index}>\r\n                                        <img src={require(\"./avatar.jpg\")} className=\"br-100 h2 w2 dib pointer fl mr2\" title=\"Photo of a kitty staring at you\" alt=\"avatar\" />\r\n                                        <h5 className='pb0 mb3 mt2 pointer hover-black-70 dark-blue dib'>{comment.owner}</h5>\r\n                                        <p className='pt0 mb3 mt0 ml4 f4'>{comment.content}</p>\r\n                                    </div>\r\n                                )\r\n                            })\r\n                        }\r\n                    </article>\r\n                )\r\n            })\r\n            this.setState({tweets: tweets})\r\n        })\r\n    }\r\n\r\n    onTextareaChange = (event) => {\r\n        this.setState({newTweetContent: event.target.value})\r\n    }\r\n\r\n    clearInput = () => {\r\n        document.getElementById('textarea').value = ''\r\n    }\r\n\r\n    onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        fetch(`http://localhost:5000/tweet/posting/${this.props.userInfo.username}`,{\r\n            method: 'post',\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify({\r\n              content: this.state.newTweetContent\r\n            })\r\n        })\r\n        .then(response => response.json())\r\n        .then(tweet => {\r\n            if(tweet._id) {\r\n                this.setState({newTweetContent: ''})\r\n                this.clearInput();\r\n                this.componentDidMount();\r\n            } else if(tweet==='please signin first!'){\r\n                this.props.changeRoute('signin')\r\n            } \r\n        })\r\n        .catch(err => console.log(err))\r\n    }\r\n\r\n    handleLikes = (tweetId) => {\r\n        if(this.props.isSignedin){\r\n            if(!this.state.liked[tweetId]) {\r\n                document.getElementById(`likeCounter${tweetId}`).innerHTML=Number(document.getElementById(`likeCounter${tweetId}`).innerHTML)+1;\r\n                this.setState(Object.assign(this.state.liked,{ [tweetId]: true }));\r\n                document.getElementById(`likeBtn${tweetId}`).classList.add('bg-light-blue')\r\n                fetch(`http://localhost:5000/tweet/likes/${tweetId}/${this.props.userInfo.username}`,{\r\n                    method: 'put'\r\n                })\r\n                .then(response => response.json())\r\n                .then(data => console.log(data))\r\n            } else {\r\n                document.getElementById(`likeCounter${tweetId}`).innerHTML=Number(document.getElementById(`likeCounter${tweetId}`).innerHTML)-1;\r\n                this.setState(Object.assign(this.state.liked,{ [tweetId]: false }));\r\n                document.getElementById(`likeBtn${tweetId}`).classList.remove('bg-light-blue')\r\n                fetch(`http://localhost:5000/tweet/dislikes/${tweetId}/${this.props.userInfo.username}`,{\r\n                    method: 'put'\r\n                })\r\n                .then(response => response.json())\r\n                .then(data => console.log(data))\r\n            }\r\n        } else {\r\n            this.props.changeRoute('signin')\r\n        }\r\n    }\r\n\r\n    showCommentBlock = (tweetId) => {\r\n        document.getElementById(`commentBlock${tweetId}`).classList.toggle('dn')\r\n    }\r\n\r\n    onCommentChange = (event) => {\r\n        this.setState({comment: event.target.value})\r\n    }\r\n\r\n    onCommentClick = (tweetId) => {\r\n        if(this.props.isSignedin && this.state.comment.length){\r\n            fetch(`http://localhost:5000/tweet/comment/${tweetId}`,{\r\n                method: 'put',\r\n                headers: {'Content-Type': 'application/json'},\r\n                body: JSON.stringify({\r\n                    owner: this.props.userInfo.username,\r\n                    content: this.state.comment\r\n                })\r\n            }).then(response => response.json())\r\n            .then(newComment => {\r\n                this.componentDidMount()\r\n                this.setState({comment: ''})\r\n                document.getElementById('comment').value = ''\r\n            })\r\n\r\n        }else if(!this.props.isSignedin) {\r\n            this.props.changeRoute('signin')\r\n        }\r\n    }\r\n    \r\n    render(){\r\n        return(\r\n            <div className=\"tc f3 mh4\">\r\n                <section className=\"mw7 center avenir\">\r\n                    <div className=\"pt2\">\r\n                        <form className=\"bg-white mw7 center pa2 br1-ns ba b--black-10\" onSubmit={this.onFormSubmit}>\r\n                            <fieldset className=\"cf bn ma0 pa0\">\r\n                            <div className=\"cf\">\r\n                                <img src={require(\"./avatar.jpg\")} className=\"fl br-100 h2 w2 dib pointer dim mt1 mr2\" title=\"Photo of a kitty staring at you\" alt=\"avatar\" />\r\n                                <textarea \r\n                                    onChange = {this.onTextareaChange}\r\n                                    className=\"f3 input-reset bn fl black-80 bg-white pt2 lh-solid w-80 w-80-m w-80-l br2-ns outline-0\" \r\n                                    placeholder=\"Add a tweet ..\" \r\n                                    type=\"text\" \r\n                                    name=\"tweet\" \r\n                                    id=\"textarea\" \r\n                                    style={{resize: 'none'}} \r\n                                />\r\n                                <input \r\n                                    className=\"f4 f3-l button-reset fr pv3 tc bn bg-animate bg-blue grow white pointer w-50 w-20-m w-20-l br4-ns outline-0\" \r\n                                    type=\"submit\" \r\n                                    value=\"Tweet\" \r\n                                />\r\n                            </div>\r\n                            </fieldset>\r\n                        </form>\r\n                    </div>\r\n                    {this.state.tweets}\r\n                </section>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\n\r\nclass Navigation extends React.Component{\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            tweets: [],\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch(`http://localhost:5000/${this.props.userInfo.username}`)\r\n        .then(res => res.json())\r\n        .then(tweets => {\r\n            if(tweets.length){\r\n                tweets = tweets.map((tweet,index) => {\r\n                    return(\r\n                        <article className=\"w-100 center bg-white br4 pa3 pa3-ns mv3 ba b--black-40 pb0 pb0-ns\" key={index}>\r\n                            <div className=\"tc\">\r\n                                <img \r\n                                    onClick={() => this.onDeleteClick(tweet._id)}\r\n                                    id={`deleteBtn${tweet._id}`}\r\n                                    src={require('./delete.webp')} \r\n                                    className=\"br-100 h2 w2 dib pointer dim fr\" \r\n                                    title=\"Photo of a kitty staring at you\" \r\n                                    alt=\"avatar\" \r\n                                />\r\n                                <img src=\"http://tachyons.io/img/avatar_1.jpg\" className=\"br-100 h2 w2 dib pointer dim\" title=\"Photo of a kitty staring at you\" alt=\"avatar\" />\r\n                                <h1 className=\"f4 pointer dim\">{tweet.username}</h1>\r\n                            </div>\r\n                            <p className=\"lh-copy measure center f3 black-70\">{tweet.content}</p>\r\n                            <div className='tl'>\r\n                                <img \r\n                                    src={require(\"./likes.jpg\")}\r\n                                    className='w2 ma0 pa0'\r\n                                    alt=\"likes\" \r\n                                />\r\n                                <span id={`likeCounter${tweet._id}`} className='f3'>{tweet.likes}</span> \r\n                                <hr className='pa0 ma0' />\r\n                            </div>\r\n                            {\r\n                                tweet.comments = tweet.comments.map((comment,index) => {\r\n                                    return(\r\n                                        <div className='bg-black-20 br3 tl ph3 pa2 pb0 w-80 ml4' key={index}>\r\n                                            <img src=\"http://tachyons.io/img/avatar_1.jpg\" className=\"br-100 h2 w2 dib pointer fl mr2\" title=\"Photo of a kitty staring at you\" alt=\"avatar\" />\r\n                                            <h5 className='pb0 mb3 mt2 pointer hover-black-70 dark-blue dib'>{comment.owner}</h5>\r\n                                            <p className='pt0 mb3 mt0 ml4 f4'>{comment.content}</p>\r\n                                        </div>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </article>\r\n                    )\r\n                })\r\n            } else {\r\n                    tweets = <h2>You dont have any tweets yet, {this.props.userInfo.username}</h2>\r\n            }\r\n            this.setState({tweets: tweets})\r\n        })\r\n    }\r\n\r\n    onDeleteClick = (tweetId) => {\r\n        fetch(`http://localhost:5000/tweet/deleting/${tweetId}`,{\r\n            method: 'delete'\r\n        })\r\n        .then(response => response.json())\r\n        .then(data => {\r\n            this.componentDidMount();\r\n        })\r\n        .catch(console.log)\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"tc f3 mh4\">\r\n                <section className=\"mw7 center avenir\">\r\n                    {this.state.tweets}\r\n                </section>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Navigation;","import React, { Component } from 'react';\nimport './App.css';\nimport Navigation from './components/Navigation';\nimport Signin from './components/Signin';\nimport Register from './components/Register';\nimport Home from './components/Home';\nimport Profile from './components/Profile';\n// import Footer from './components/Footer';\n\nconst initialState = {\n    route: 'homeDefault',\n    isSignedin: false,\n    userInfo: {}\n}\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = initialState\n  }\n\n  changeRoute = (route) => {\n    if(route==='signout')\n      this.setState(initialState)\n    this.setState({ route: route });\n    if(route === 'homeSignedin')\n      this.setState({isSignedin: true});\n  }\n\n  loadUser = (data) => {\n    this.setState({userInfo: data})\n  }\n\n  render(){\n    return (\n      <div>\n        <Navigation \n          changeRoute={this.changeRoute}\n          isSignedin={this.state.isSignedin}\n          userInfo={this.state.userInfo} \n        />\n        {\n          (this.state.route === 'homeDefault' || this.state.route === 'homeSignedin')\n          ? <Home \n              changeRoute={this.changeRoute}\n              userInfo={this.state.userInfo}\n              isSignedin={this.state.isSignedin}\n            />\n          : this.state.route === 'profile'\n          ? <Profile userInfo={this.state.userInfo} />\n          : this.state.route === 'register'\n          ? <Register\n              changeRoute={this.changeRoute}\n            />\n          : <Signin\n              changeRoute={this.changeRoute}\n              loadUser={this.loadUser}\n            />\n        }\n        {/* <Footer /> */}\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}